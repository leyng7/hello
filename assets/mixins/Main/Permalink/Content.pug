#content(class='relative w-full px-4 lg:px-0 lg:max-w-screen-lg lg:w-pem lg:mx-auto')
  .wrap(x-data='content')
    s_if_var_toc
      include Content/TOC
    include Content/Article
    s_if_var_scrollspy
      include Content/Scrollspy

script(once='alpine-article-component').
  document.addEventListener('alpine:init', () => Alpine.data('content', () => ({
    /**
     * Support Headings
     *
     * @property {array} headings
     */
    supportHeadings: '.contents_style > h2, .contents_style > h3',

    /**
     * Headings
     *
     * @property {array} headings
     */
    headings: [],

    /**
     * Init 'content' Component
     */
    init () {
      this.setAnchorToHeadings()
      this.collectHeading()

      this.setLazyLoadToImages()
      this.setRatioToImages()
      this.setPositionToImages()

      this.highlightCodeBlocks()
      this.addBlankHashToMoreLesses()
    },

    /**
     * Add blank hash To morelesses
     */
    addBlankHashToMoreLesses () {
      this.$article.querySelectorAll('a.btn-toggle-moreless').forEach($moreless => {
        $moreless.setAttribute('href', '#')
      })
    },

    /**
     * Syntax highlighting code blocks in template
     */
    highlightCodeBlocks () {
      this.$article.querySelectorAll('pre code').forEach(hljs.highlightElement)
    },

    /**
     * Collect heading in template
     */
    collectHeading () {
      this.$headings.forEach($heading => {
        const heading = this.heading($heading)

        this.headings.push(heading)
      })
    },

    /**
     * Get new Scrollspy item
     *
     * @param {HTMLElement} $heading
     *
     * @return {object}
     */
    heading ($heading) {
      return {
        tagName: $heading.tagName,
        id: $heading.id,
        href: `#${$heading.id}`,
        text: $heading.textContent,
        active: false
      }
    },

    /**
     * Set lazy load to images
     */
    setLazyLoadToImages () {
      this.$article.querySelectorAll('figure[class^=image] img').forEach(this.setLazyLoadToImage)
    },

    /**
     * Set lazy load to image
     *
     * @param {object} $image
     */
    setLazyLoadToImage ($image) {
      $image.classList.add('lazyload')

      $image.dataset.src = $image.getAttribute('src')
      $image.dataset.srcset = $image.getAttribute('srcset')
      $image.dataset.sizes = 'auto'

      $image.removeAttribute('src')
      $image.removeAttribute('srcset')
    },

    /**
     * set Ratio to images in template
     */
    setRatioToImages () {
      this.$article.querySelectorAll('figure.imageslideblock').forEach(this.setRatioToImageSlideBlock.bind(this))
      this.$article.querySelectorAll('figure.imageblock').forEach(this.setRatioToImageBlock.bind(this))
      this.$article.querySelectorAll('figure.imagegridblock').forEach(this.setRatioToImageGridBlock.bind(this))
    },

    /**
     * Set Ratio to image block
     *
     * @param {HTMLElement} $imageBlock
     */
    setRatioToImageBlock ($imageBlock) {
      const $imageWrap = $imageBlock.querySelector('span, a')
      const $image = $imageWrap.querySelector('img')

      const paddingBottom = this.ratio($imageBlock, $image)

      $imageWrap.style.paddingBottom = `${paddingBottom}%`
    },

    /**
     * Set Ratio to image grid block
     *
     * @param {HTMLElement} $imageBlock
     */
    setRatioToImageGridBlock ($imageBlock) {
      const $imageWraps = $imageBlock.querySelectorAll('span, a')

      $imageWraps.forEach($imageWrap => {
        const $image = $imageWrap.querySelector('img')

        const paddingBottom = this.ratio($imageWrap, $image)

        $imageWrap.style.paddingBottom = `${paddingBottom}%`
      })
    },

    /**
     * Set Ratio to image slide block
     *
     * @param {HTMLElement} $imageBlock
     */
    setRatioToImageSlideBlock ($imageBlock) {
      const $imageContainer = $imageBlock.querySelector('.image-container')
      const $image = $imageContainer.querySelector('img')

      const paddingBottom = this.ratio($image, $image)

      $imageContainer.style.paddingBottom = `${paddingBottom}%`
    },

    /**
     * Get ratio
     *
     * @param {HTMLElement} $originBlock
     * @param {HTMLElement} $image
     *
     * @return {number}
     */
    ratio ($originBlock, $image) {
      let width = $originBlock.dataset.originWidth
      let height = $originBlock.dataset.originHeight

      if ($image.hasAttribute('width') && $image.hasAttribute('height')) {
        width = $image.getAttribute('width')
        height = $image.getAttribute('height')
      }

      width = $originBlock.dataset.widthpercent
        ? width * (100 / $originBlock.dataset.widthpercent)
        : width

      return height / width * 100
    },

    /**
     * Set position to images
     */
    setPositionToImages () {
      this.$article.querySelectorAll('figure.imageblock').forEach(this.setImageBlockPosition.bind(this))
      this.$article.querySelectorAll('figure.imagegridblock').forEach(this.setImageGridBlockPosition.bind(this))
    },

    /**
     * Set image block position
     *
     * @param {HTMLElement} $imageBlock
     */
    setImageBlockPosition ($imageBlock) {
      const width = this.imageBlockWidth($imageBlock)

      if ($imageBlock.classList.contains('alignCenter')) {
        this.setImageBlockToCenter($imageBlock)
      }

      if ($imageBlock.classList.contains('widthContent')) {
        return
      }

      this.setImageBlockWidth($imageBlock, width)
    },

    /**
     * Set image grid block position
     *
     * @param {HTMLElement} $imageBlock
     */
    setImageGridBlockPosition ($imageBlock) {
      const width = this.imageGridBlockWidth()

      this.setImageBlockToCenter($imageBlock)
      this.setImageBlockWidth($imageBlock, width)
    },

    /**
     * Center image block
     *
     * @param {HTMLElement} $imageBlock
     */
    imageBlockWidth ($imageBlock) {
      const $imageWrap = $imageBlock.querySelector('span, a')
      const $image = $imageWrap.querySelector('img')
      const width = $image.getAttribute('width') || $imageBlock.dataset.originWidth

      return width > 1100 ? 1100 : width
    },

    /**
     * Center image grid block
     */
    imageGridBlockWidth () {
      return 1100
    },

    /**
     * set Image Width
     *
     * @param {HTMLElement} $imageBlock
     * @param {String|Number} width
     */
    setImageBlockWidth ($imageBlock, width) {
      $imageBlock.style.width = `${width}px`
      $imageBlock.style.maxWidth = `${width}px`
    },

    /**
     * set Image block to center
     *
     * @param {HTMLElement} $imageBlock
     */
    setImageBlockToCenter ($imageBlock) {
      $imageBlock.style.marginLeft = '50%'
      $imageBlock.style.transform = 'translateX(-50%)'
    },

    /**
     * Set anchor to headings in template
     */
    setAnchorToHeadings () {
      this.$headings.forEach(this.setAnchorToHeading.bind(this))
    },

    /**
     * Set anchor to heading
     *
     * @param {HTMLElement} $heading
     */
    setAnchorToHeading ($heading) {
      const link = this.link($heading)
      const $anchor = this.$anchor($heading, `#${link}`)

      $heading.setAttribute('id', link)
      $heading.innerHTML = $anchor.outerHTML
    },

    /**
     * Get link for heading
     *
     * @param {HTMLElement} $heading
     *
     * @return {string}
     */
    link ($heading) {
      return this.$id(encodeURIComponent($heading.textContent))
    },

    /**
     * Get new anchor
     *
     * @param {HTMLElement} $heading
     * @param {string} link
     *
     * @return {HTMLElement}
     */
    $anchor ($heading, link) {
      const $anchor = document.createElement('a')

      $anchor.setAttribute('href', link)
      $anchor.textContent = $heading.textContent

      return $anchor
    },

    /**
     * Get article template content
     *
     * @return {HTMLElement}
     */
    get $article () {
      return this.$refs.articleTemplate.content
    },

    /**
     * Get headings in content
     *
     * @return {NodeListOf<HTMLElement>}
     */
    get $headings () {
      return this.$article.querySelectorAll(this.supportHeadings)
    }
  })))
